import TelegramBot, { ReplyKeyboardMarkup } from "node-telegram-bot-api";
import dotenv from "dotenv";
import connectDB from "./db/db";
import { User, Report, Executor, Admin } from "./db/shema";
import { messages } from "./constants";
import { google } from "googleapis";
import { JWT } from "google-auth-library";
import { fileURLToPath } from "url";
import { dirname } from "path";
import { join } from "path";
import { chat } from "googleapis/build/src/apis/chat";
import {
  InlineKeyboardButton,
  InlineKeyboardMarkup,
} from "node-telegram-bot-api";

dotenv.config();

const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN!, { polling: true });

connectDB();

const adminWhitelist = ["77772794404"];

const SCOPES = ["https://www.googleapis.com/auth/spreadsheets"];
const GOOGLE_PRIVATE_KEY = process.env.GOOGLE_PRIVATE_KEY?.replace(
  /\\n/g,
  "\n"
);
const GOOGLE_CLIENT_EMAIL = process.env.GOOGLE_CLIENT_EMAIL;

const jwtClient = new JWT({
  email: GOOGLE_CLIENT_EMAIL,
  key: GOOGLE_PRIVATE_KEY,
  scopes: SCOPES,
});

bot.setMyCommands([
  {
    command: "/start",
    description: "ü§© Start the bot / –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç / –ë–æ—Ç—Ç—ã —ñ—Å–∫–µ “õ–æ—Å—É",
  },
  {
    command: "/help",
    description: "ü§î Get help / –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å / –ö”©–º–µ–∫ –∞–ª—É",
  },
  {
    command: "/report",
    description: "üìù Send a complaint / –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É / –ñ–∞“ì–¥–∞–π–¥—ã —Ö–∞–±–∞—Ä–ª–∞—É",
  },
  {
    command: "/language",
    description: "üåê Change language / –ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ / –¢—ñ–ª–¥—ñ ”©–∑–≥–µ—Ä—Ç—É",
  },
  {
    command: "/register",
    description: "üìã Register / –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è / –¢—ñ—Ä–∫–µ–ª—É",
  },
]);

interface Department {
  ru: string;
  kk: string;
}

const departments: Department[] = [
  { ru: "–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ-–ø—Ä–∞–≤–æ–≤–æ–π –æ—Ç–¥–µ–ª", kk: "–ú–µ–º–ª–µ–∫–µ—Ç—Ç—ñ–∫-“õ“±“õ—ã“õ—Ç—ã“õ –±”©–ª—ñ–º—ñ" },
  { ru: "–§–∏–Ω–∞–Ω—Å–æ–≤–æ-—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ç–¥–µ–ª", kk: "“ö–∞—Ä–∂—ã-—à–∞—Ä—É–∞—à—ã–ª—ã“õ –±”©–ª—ñ–º—ñ" },
  { ru: "–û—Ç–¥–µ–ª –±–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", kk: "–ö”©—Ä—ñ–∫—Ç–µ–Ω–¥—ñ—Ä—É –±”©–ª—ñ–º—ñ" },
  {
    ru: "–û—Ç–¥–µ–ª –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è",
    kk: "“ö“±–∂–∞—Ç—Ç–∞–º–∞–ª—ã“õ “õ–∞–º—Ç–∞–º–∞—Å—ã–∑ –µ—Ç—É –±”©–ª—ñ–º—ñ",
  },
  {
    ru: "–û—Ç–¥–µ–ª –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º",
    kk: "–ñ“±–º—ã—Å–ø–µ–Ω “õ–∞–º—Ç—É –∂”ô–Ω–µ ”ô–ª–µ—É–º–µ—Ç—Ç—ñ–∫ –±–∞“ì–¥–∞—Ä–ª–∞–º–∞–ª–∞—Ä –±”©–ª—ñ–º—ñ",
  },
  {
    ru: "–û—Ç–¥–µ–ª –∏–Ω–∂–µ–Ω–µ—Ä–Ω–æ–π –∏ –¥–æ—Ä–æ–∂–Ω–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã",
    kk: "–ò–Ω–∂–µ–Ω–µ—Ä–ª—ñ–∫ –∂”ô–Ω–µ –∂–æ–ª –∏–Ω—Ñ—Ä–∞“õ“±—Ä—ã–ª—ã–º—ã –±”©–ª—ñ–º—ñ",
  },
  {
    ru: "–û—Ç–¥–µ–ª –∫—É–ª—å—Ç—É—Ä—ã –∏ —Ä–∞–∑–≤–∏—Ç–∏—è —è–∑—ã–∫–æ–≤",
    kk: "–ú”ô–¥–µ–Ω–∏–µ—Ç –∂”ô–Ω–µ —Ç—ñ–ª–¥–µ—Ä–¥—ñ –¥–∞–º—ã—Ç—É –±”©–ª—ñ–º—ñ",
  },
  { ru: "–û—Ç–¥–µ–ª –∫–æ–º–º—É–Ω–∞–ª—å–Ω–æ–≥–æ —Ö–æ–∑—è–π—Å—Ç–≤–∞", kk: "–ö–æ–º–º—É–Ω–∞–ª–¥—ã“õ —à–∞—Ä—É–∞—à—ã–ª—ã“õ –±”©–ª—ñ–º—ñ" },
  { ru: "–û—Ç–¥–µ–ª –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è", kk: "“ö–æ“ì–∞–º–¥—ã“õ –¥–∞–º—ã—Ç—É –±”©–ª—ñ–º—ñ" },
  {
    ru: "–û—Ç–¥–µ–ª –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–π –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã",
    kk: "“∞–π—ã–º–¥–∞—Å—Ç—ã—Ä—É –∂”ô–Ω–µ –±–∞“õ—ã–ª–∞—É –∂“±–º—ã—Å—ã –±”©–ª—ñ–º—ñ",
  },
  {
    ru: "–û—Ç–¥–µ–ª –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏",
    kk: "–ö”ô—Å—ñ–ø–∫–µ—Ä–ª—ñ–∫—Ç—ñ –∂”ô–Ω–µ ”©–Ω–µ—Ä–∫”ô—Å—ñ–ø—Ç—ñ –¥–∞–º—ã—Ç—É –±”©–ª—ñ–º—ñ",
  },
];

interface UserState {
  language: string;
  fullName?: string;
  phoneNumber?: string;
  email?: string;
  registrationStep?: "awaitingName" | "awaitingPhone" | "awaitingEmail";
}

let userState: { [key: number]: UserState } = {};

let adminPanel = false;
let executorPanel = false;

bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const user = await User.findOne({ chatId });
  const language = user?.language || "ru";
  userState[chatId] = { ...userState[chatId], language };

  const welcomeMessage = user
    ? messages.welcomeBackUser[language]
    : messages.welcome[language];
  const commandButtons = [
    [
      { text: "ü§© –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç / –ë–æ—Ç—Ç—ã —ñ—Å–∫–µ “õ–æ—Å—É" },
      { text: "ü§î –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å / –ö”©–º–µ–∫ –∞–ª—É" },
    ],
    [
      { text: "üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É / –®–∞“ì—ã–º –∂—ñ–±–µ—Ä—É" },
      { text: "üåê –ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ / –¢—ñ–ª–¥—ñ ”©–∑–≥–µ—Ä—Ç—É" },
    ],
    [{ text: "üìã –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è / –¢—ñ—Ä–∫–µ–ª—É" }],
  ];

  const functionalityMessage = messages.botFunctionality[language];

  await bot.sendMessage(
    chatId,
    `${welcomeMessage}\n\n${functionalityMessage}`,
    {
      reply_markup: {
        keyboard: commandButtons,
        resize_keyboard: true,
      },
    }
  );
});

bot.on("message", async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  if (!userState[chatId]) {
    const user = await User.findOne({ chatId });
    userState[chatId] = { language: user?.language || "ru" };
  }

  switch (text) {
    case "ü§î –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å / –ö”©–º–µ–∫ –∞–ª—É":
      await handleHelp(chatId);
      break;
    case "üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É / –®–∞“ì—ã–º –∂—ñ–±–µ—Ä—É":
      await handleReport(chatId);
      break;
    case "üåê –ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ / –¢—ñ–ª–¥—ñ ”©–∑–≥–µ—Ä—Ç—É":
      await handleLanguage(chatId);
      break;
    case "üìã –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è / –¢—ñ—Ä–∫–µ–ª—É":
      await handleRegister(chatId);
      break;
    case "/help":
      await handleHelp(chatId);
      break;
    case "/report":
      await handleReport(chatId);
      break;
    case "/language":
      await handleLanguage(chatId);
      break;
    case "/register":
      await handleRegister(chatId);
      break;
  }
});

async function handleHelp(chatId: number) {
  const language = userState[chatId]?.language || "ru";

  const helpMessage = {
    ru: `üìå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:

1. –ö–∞–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è:
   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /register –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üìã –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"
   ‚Ä¢ –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –¥–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏, –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ email

2. –ö–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É:
   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /report –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É"
   ‚Ä¢ –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É
   ‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ—Ç–¥–µ–ª
   ‚Ä¢ –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ ÔøΩÔøΩ–ª–∏ –≤–∏–¥–µ–æ

3. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–¥–µ–ª–∞—Ö:
   ‚Ä¢ –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ-–ø—Ä–∞–≤–æ–≤–æ–π –æ—Ç–¥–µ–ª
   ‚Ä¢ –§–∏–Ω–∞–Ω—Å–æ–≤–æ-—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ç–¥–µ–ª
   ‚Ä¢ –û—Ç–¥–µ–ª –±–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
   ‚Ä¢ –û—Ç–¥–µ–ª –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è
   ‚Ä¢ –û—Ç–¥–µ–ª –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º
   ‚Ä¢ –û—Ç–¥–µ–ª –∏–Ω–∂–µ–Ω–µ—Ä–Ω–æ–π –∏ –¥–æ—Ä–æ–∂–Ω–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
   ‚Ä¢ –û—Ç–¥–µ–ª –∫—É–ª—å—Ç—É—Ä—ã –∏ —Ä–∞–∑–≤–∏—Ç–∏—è —è–∑—ã–∫–æ–≤
   ‚Ä¢ –û—Ç–¥–µ–ª –∫–æ–º–º—É–Ω–∞–ª—å–Ω–æ–≥–æ —Ö–æ–∑—è–π—Å—Ç–≤–∞
   ‚Ä¢ –û—Ç–¥–µ–ª –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è
   ‚Ä¢ –û—Ç–¥–µ–ª –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–π –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
   ‚Ä¢ –û—Ç–¥–µ–ª –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏

–î–ª—è —Å–º–µ–Ω—ã —è–∑—ã–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /language –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üåê –ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫"`,

    kk: `üìå –ë–æ—Ç —Ç—É—Ä–∞–ª—ã –∞“õ–ø–∞—Ä–∞—Ç:

1. “ö–∞–ª–∞–π —Ç—ñ—Ä–∫–µ–ª—É–≥–µ –±–æ–ª–∞–¥—ã:
   ‚Ä¢ /register –∫–æ–º–∞–Ω–¥–∞—Å—ã–Ω –ø–∞–π–¥–∞–ª–∞–Ω—ã“£—ã–∑ –Ω–µ–º–µ—Å–µ "üìã –¢—ñ—Ä–∫–µ–ª—É" —Ç“Ø–π–º–µ—Å—ñ–Ω –±–∞—Å—ã“£—ã–∑
   ‚Ä¢ –ê—Ç—ã-–∂”©–Ω—ñ“£—ñ–∑–¥—ñ, —Ç–µ–ª–µ—Ñ–æ–Ω –Ω”©–º—ñ—Ä—ñ“£—ñ–∑–¥—ñ –∂”ô–Ω–µ email –µ–Ω–≥—ñ–∑—É –Ω“±—Å“õ–∞—É–ª–∞—Ä—ã–Ω –æ—Ä—ã–Ω–¥–∞“£—ã–∑

2. –®–∞“ì—ã–º–¥—ã “õ–∞–ª–∞–π –∂—ñ–±–µ—Ä—É–≥–µ –±–æ–ª–∞–¥—ã:
   ‚Ä¢ /report –∫–æ–º–∞–Ω–¥–∞—Å—ã–Ω –ø–∞–π–¥–∞–ª–∞–Ω—ã“£—ã–∑ –Ω–µ–º–µ—Å–µ "üìù –®–∞“ì—ã–º –∂—ñ–±–µ—Ä—É" —Ç“Ø–π–º–µ—Å—ñ–Ω –±–∞—Å—ã“£—ã–∑
   ‚Ä¢ –ú”ô—Å–µ–ª–µ“£—ñ–∑–¥—ñ —Å–∏–ø–∞—Ç—Ç–∞“£—ã–∑
   ‚Ä¢ –¢–∏—ñ—Å—Ç—ñ –±”©–ª—ñ–º–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑
   ‚Ä¢ “ö–∞–ª–∞—É—ã“£—ã–∑ –±–æ–π–Ω—à–∞ —Ñ–æ—Ç–æ –Ω–µ–º–µ—Å–µ –±–µ–π–Ω–µ —Ç—ñ—Ä–∫–µ“£—ñ–∑

3. –ë”©–ª—ñ–º–¥–µ—Ä —Ç—É—Ä–∞–ª—ã –∞“õ–ø–∞—Ä–∞—Ç:
   ‚Ä¢ –ú–µ–º–ª–µ–∫–µ—Ç—Ç—ñ–∫-“õ“±“õ—ã“õ—Ç—ã“õ –±”©–ª—ñ–º—ñ
   ‚Ä¢ “ö–∞—Ä–∂—ã-—à–∞—Ä—É–∞—à—ã–ª—ã“õ –±”©–ª—ñ–º—ñ
   ‚Ä¢ –ö”©—Ä—ñ–∫—Ç–µ–Ω–¥—ñ—Ä—É –±”©–ª—ñ–º—ñ
   ‚Ä¢ “ö“±–∂–∞—Ç—Ç–∞–º–∞–ª—ã“õ “õ–∞–º—Ç–∞–º–∞—Å—ã–∑ –µ—Ç—É –±”©–ª—ñ–º—ñ
   ‚Ä¢ –ñ“±–º—ã—Å–ø–µ–Ω “õ–∞–º—Ç—É –∂”ô–Ω–µ ”ô–ª–µ—É–º–µ—Ç—Ç—ñ–∫ –±–∞“ì–¥–∞—Ä–ª–∞–º–∞–ª–∞—Ä –±”©–ª—ñ–º—ñ
   ‚Ä¢ –ò–Ω–∂–µ–Ω–µ—Ä–ª—ñ–∫ –∂”ô–Ω–µ –∂–æ–ª –∏–Ω—Ñ—Ä–∞“õ“±—Ä—ã–ª—ã–º—ã –±”©–ª—ñ–º—ñ
   ‚Ä¢ –ú”ô–¥–µ–Ω–∏–µ—Ç –∂”ô–Ω–µ —Ç—ñ–ª–¥–µ—Ä–¥—ñ –¥–∞–º—ã—Ç—É –±”©–ª—ñ–º—ñ
   ‚Ä¢ –ö–æ–º–º—É–Ω–∞–ª–¥—ã“õ —à–∞—Ä—É–∞—à—ã–ª—ã“õ –±”©–ª—ñ–º—ñ
   ‚Ä¢ “ö–æ“ì–∞–º–¥—ã“õ –¥–∞–º—ã—Ç—É –±”©–ª—ñ–º—ñ
   ‚Ä¢ “∞–π—ã–º–¥–∞—Å—Ç—ã—Ä—É –∂”ô–Ω–µ –±–∞“õ—ã–ª–∞—É –∂“±–º—ã—Å—ã –±”©–ª—ñ–º—ñ
   ‚Ä¢ –ö”ô—Å—ñ–ø–∫–µ—Ä–ª—ñ–∫—Ç—ñ –∂”ô–Ω–µ ”©–Ω–µ—Ä–∫”ô—Å—ñ–ø—Ç—ñ –¥–∞–º—ã—Ç—É –±”©–ª—ñ–º—ñ

–¢—ñ–ª–¥—ñ ”©–∑–≥–µ—Ä—Ç—É “Ø—à—ñ–Ω /language –∫–æ–º–∞–Ω–¥–∞—Å—ã–Ω –ø–∞–π–¥–∞–ª–∞–Ω—ã“£—ã–∑ –Ω–µÔøΩÔøΩ–µ—Å–µ "üåê –¢—ñ–ª–¥—ñ ”©–∑–≥–µ—Ä—Ç—É" —Ç“Ø–π–º–µ—Å—ñ–Ω –±–∞—Å—ã“£—ã–∑`,
  };

  const keyboard: InlineKeyboardMarkup = {
    inline_keyboard: [
      [
        {
          text: language === "ru" ? "üìã –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è" : "üìã –¢—ñ—Ä–∫–µ–ª—É",
          callback_data: "register",
        },
        {
          text: language === "ru" ? "üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É" : "üìù –®–∞“ì—ã–º –∂—ñ–±–µ—Ä—É",
          callback_data: "report",
        },
      ],
      [
        {
          text: language === "ru" ? "üåê –ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫" : "üåê –¢—ñ–ª–¥—ñ ”©–∑–≥–µ—Ä—Ç—É",
          callback_data: "language",
        },
      ],
    ],
  };

  await bot.sendMessage(chatId, helpMessage[language], {
    reply_markup: keyboard,
  });
}

async function handleReport(chatId: number) {
  const language = userState[chatId]?.language || "ru";
  const user = await User.findOne({ chatId });

  if (!user) {
    await bot.sendMessage(chatId, messages.report.notRegistered[language]);
    return;
  }

  await bot.sendMessage(chatId, messages.report.textPrompt[language]);

  const reportText = await new Promise<string>((resolve) => {
    bot.once("message", (msg) => {
      if (msg.chat.id === chatId && msg.text) {
        resolve(msg.text);
      }
    });
  });

  const departmentOptions = departments.map((dept) => ({
    text: dept[language as keyof Department],
  }));

  await bot.sendMessage(chatId, messages.report.departmentPrompt[language], {
    reply_markup: {
      keyboard: departmentOptions.map((dept) => [dept]),
      one_time_keyboard: true,
      resize_keyboard: true,
    },
  });

  const department = await new Promise<string>((resolve) => {
    bot.once("message", (msg) => {
      if (msg.chat.id === chatId && msg.text) {
        const selectedDept = departments.find(
          (dept) => dept[language as keyof Department] === msg.text
        );
        if (selectedDept) {
          resolve(selectedDept[language as keyof Department]);
        }
      }
    });
  });

  await bot.sendMessage(chatId, messages.report.photoPrompt[language]);

  const photoUrl = await new Promise<string | null>((resolve) => {
    bot.once("message", (msg) => {
      if (msg.chat.id === chatId) {
        if (msg.photo && msg.photo.length > 0) {
          const fileId = msg.photo[msg.photo.length - 1].file_id;
          bot.getFileLink(fileId).then((url) => resolve(url));
        } else {
          resolve(null);
        }
      }
    });
  });

  await bot.sendMessage(chatId, messages.report.videoPrompt[language]);

  const videoUrl = await new Promise<string | null>((resolve) => {
    bot.once("message", (msg) => {
      if (msg.chat.id === chatId) {
        if (msg.video) {
          bot.getFileLink(msg.video.file_id).then((url) => resolve(url));
        } else {
          resolve(null);
        }
      }
    });
  });

  const executors = await Executor.find({});

  if (executors.length === 0) {
    await bot.sendMessage(chatId, messages.report.noExecutors[language]);
    return;
  }

  const randomExecutor =
    executors[Math.floor(Math.random() * executors.length)];

  try {
    const newReport = new Report({
      reportText,
      department,
      user: user.id,
      photoUrl,
      videoUrl,
      dateReport: new Date(),
      status: "assigned",
      receiverChatId: randomExecutor.chatId,
    });

    await newReport.save();

    await addReportToSheet(newReport);

    await bot.sendMessage(chatId, messages.report.success[language]);
  } catch (error) {
    console.error("Error saving report:", error);
    await bot.sendMessage(chatId, messages.report.error[language]);
  }
}

const sheets = google.sheets({ version: "v4", auth: jwtClient });

async function addReportToSheet(report: any) {
  try {
    // Fetch the user and admin data
    const user = await User.findById(report.user);
    const admin = await Admin.find({ googleSheetId: { $ne: null } });

    if (!admin || admin.length === 0) {
      return false;
    }
    if (!user) {
      throw new Error("User not found");
    }

    // Define the column names
    const columnNames = [
      "User ID",
      "Full Name",
      "Phone Number",
      "Email",
      "Report Text",
      "Department",
      "Photo URL",
      "Video URL",
      "Report Date",
      "Status",
      "Receiver Chat ID",
    ];

    // Fetch spreadsheet details
    const sheetInfo = await sheets.spreadsheets.get({
      spreadsheetId: admin[0].googleSheetId,
    });

    const sheetsList = sheetInfo.data.sheets;
    if (!sheetsList || sheetsList.length === 0) {
      throw new Error("No sheets found in the spreadsheet.");
    }

    // Use the first available sheet
    const firstSheet = sheetsList[0].properties?.title;
    const sheetId = sheetsList[0].properties?.sheetId;

    if (!firstSheet || sheetId === undefined) {
      throw new Error("Sheet details not found.");
    }

    // Check and add column names if they do not exist
    const sheetData = await sheets.spreadsheets.values.get({
      spreadsheetId: admin[0].googleSheetId,
      range: `${firstSheet}!A1:L1`,
    });

    const firstRow = sheetData.data.values ? sheetData.data.values[0] : [];

    if (
      !firstRow.length ||
      !firstRow.every((col, idx) => col === columnNames[idx])
    ) {
      await sheets.spreadsheets.values.update({
        spreadsheetId: admin[0].googleSheetId,
        range: `${firstSheet}!A1`,
        valueInputOption: "RAW",
        requestBody: {
          values: [columnNames],
        },
      });
      console.log("Column names added to the first sheet.");

      if (sheetId !== undefined) {
        await sheets.spreadsheets.batchUpdate({
          spreadsheetId: admin[0].googleSheetId,
          requestBody: {
            requests: [
              {
                repeatCell: {
                  range: {
                    sheetId: sheetId,
                    startRowIndex: 0,
                    endRowIndex: 1,
                    startColumnIndex: 0,
                    endColumnIndex: columnNames.length,
                  },
                  cell: {
                    userEnteredFormat: {
                      textFormat: {
                        bold: true,
                        fontSize: 12, // Larger font size
                      },
                    },
                  },
                  fields: "userEnteredFormat(backgroundColor,textFormat)",
                },
              },
            ],
          },
        });

        console.log("Formatting applied to column names.");
      }
    } else {
      console.log("Column names already exist.");
    }

    // Prepare the values for the report
    const values = [
      [
        user.id,
        user.fullName,
        user.phoneNumber,
        user.email || "N/A",
        report.reportText,
        report.department,
        report.photoUrl || "N/A",
        report.videoUrl || "N/A",
        report.dateReport.toISOString(),
        report.status,
        report.receiverChatId.toString(),
      ],
    ];

    // Append the new report data
    const response = await sheets.spreadsheets.values.append({
      spreadsheetId: admin[0].googleSheetId,
      range: `${firstSheet}`,
      valueInputOption: "USER_ENTERED",
      insertDataOption: "INSERT_ROWS",
      requestBody: {
        values: values,
      },
    });

    console.log("Report added to the first sheet:", response.data);

    // Apply text overflow formatting to newly appended rows
    const lastRowIndex = response.data.updates.updatedRange
      .split(":")[1]
      .replace(/\D/g, "");
    if (sheetId !== undefined) {
      await sheets.spreadsheets.batchUpdate({
        spreadsheetId: admin[0].googleSheetId,
        requestBody: {
          requests: [
            {
              repeatCell: {
                range: {
                  sheetId: sheetId,
                  startRowIndex: 1,
                  endRowIndex: parseInt(lastRowIndex, 10),
                  startColumnIndex: 0,
                  endColumnIndex: columnNames.length,
                },
                cell: {
                  userEnteredFormat: {
                    wrapStrategy: "OVERFLOW_CELL",
                  },
                },
                fields: "userEnteredFormat(wrapStrategy)",
              },
            },
          ],
        },
      });

      console.log("Text overflow formatting applied to report data.");
    }
  } catch (error) {
    console.error("Error adding report to Google Sheets:", error);
  }
}

async function askLanguage(chatId: number): Promise<void> {
  const user = await User.findOne({ chatId });
  const currentLanguage = user?.language || userState[chatId]?.language || "ru";

  await bot.sendMessage(chatId, "üåé –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / –¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑:", {
    reply_markup: {
      keyboard: [[{ text: "üá∑üá∫ –†—É—Å—Å–∫–∏–π" }, { text: "üá∞üáø “ö–∞–∑–∞“õ—à–∞" }]],
      one_time_keyboard: true,
      resize_keyboard: true,
    },
  });

  return new Promise((resolve) => {
    bot.once("message", async (msg) => {
      if (msg.chat.id === chatId) {
        const lang = msg.text;
        if (lang === "üá∑üá∫ –†—É—Å—Å–∫–∏–π" || lang === "üá∞üáø “ö–∞–∑–∞“õ—à–∞") {
          const newLanguage = lang === "üá∑üá∫ –†—É—Å—Å–∫–∏–π" ? "ru" : "kk";
          userState[chatId] = { ...userState[chatId], language: newLanguage };
          await bot.sendMessage(
            chatId,
            "üåé –Ø–∑—ã–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω! / –¢—ñ–ª–¥—ñ ”©–∑–≥–µ—Ä—Ç—É —Å”ô—Ç—Ç—ñ –∞—è“õ—Ç–∞–ª–¥—ã!"
          );
          if (user) {
            user.language = newLanguage;
            await user.save();
          }
        } else {
          userState[chatId] = {
            ...userState[chatId],
            language: currentLanguage,
          };
        }
        resolve();
      }
    });
  });
}

async function handleLanguage(chatId: number) {
  await askLanguage(chatId);
}

async function handleRegister(chatId: number) {
  const language = userState[chatId]?.language || "ru";

  await bot.sendMessage(chatId, messages.registration.namePrompt[language]);

  userState[chatId] = {
    ...userState[chatId],
    language,
    registrationStep: "awaitingName",
  };

  bot.once("message", async (msg) => {
    if (msg.chat.id === chatId && msg.text) {
      const fullName = msg.text;
      userState[chatId] = {
        ...userState[chatId],
        fullName,
        registrationStep: "awaitingPhone",
      };

      await bot.sendMessage(
        chatId,
        messages.registration.phonePrompt[language]
      );

      bot.once("message", async (phoneMsg) => {
        if (phoneMsg.chat.id === chatId && phoneMsg.text) {
          const phoneNumber = phoneMsg.text;
          userState[chatId] = {
            ...userState[chatId],
            phoneNumber,
            registrationStep: "awaitingEmail",
          };

          await bot.sendMessage(
            chatId,
            messages.registration.emailPrompt[language]
          );

          bot.once("message", async (emailMsg) => {
            if (emailMsg.chat.id === chatId && emailMsg.text) {
              const email = emailMsg.text;

              try {
                await User.findOneAndUpdate(
                  { chatId },
                  {
                    chatId,
                    fullName: userState[chatId].fullName,
                    phoneNumber: userState[chatId].phoneNumber,
                    email,
                    language,
                  },
                  { upsert: true, new: true }
                );

                await bot.sendMessage(
                  chatId,
                  messages.registration.success[language]
                );
              } catch (error) {
                console.error("Error during registration:", error);
                await bot.sendMessage(
                  chatId,
                  messages.registration.error[language]
                );
              }

              userState[chatId] = { language };
            }
          });
        }
      });
    }
  });
}
function extractGoogleSheetId(url): string | false {
  const regex = /\/d\/([a-zA-Z0-9-_]+)\//;
  const match = url.match(regex);

  if (match && match[1]) {
    return match[1];
  } else {
    return false;
  }
}

async function handleGoogleSheetId(chatId: number) {
  bot.sendMessage(chatId, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—É");
  bot.once("message", async (msg) => {
    const googleSheetUrl = msg.text;
    const googleSheetId = extractGoogleSheetId(googleSheetUrl);
    if (googleSheetId === false) {
      bot.sendMessage(
        chatId,
        "–°—Å—ã–ª–∫–∞ –Ω–∞ –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—É –Ω–µ–≤–µ—Ä–Ω–∞—è, –ø–æ–ø–±—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"
      );
    }
    const admin = Admin.findOneAndUpdate(
      { chat_id: msg.chat.id },
      { googleSheetId: googleSheetId },
      { new: true }
    );
    (await admin).save();
  });
}

async function handleRegisterExecutor(chatId: number) {
  const register_keyboard: ReplyKeyboardMarkup = {
    keyboard: [
      [
        {
          text: "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º",
          request_contact: true,
        },
      ],
    ],
  };

  bot.sendMessage(chatId, "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", {
    reply_markup: register_keyboard,
  });
  await bot.on("contact", (msgContact) => {
    const language = userState[chatId]?.language || "ru";
    const userId = msgContact.contact.user_id;
    const phone_number = msgContact.contact.phone_number;
    bot.sendMessage(chatId, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–µ –§–ò–û");
    bot.once("message", async (msg) => {
      const fullName = msg.text;
      const departmentOptions = departments.map((dept) => ({
        text: dept[language as keyof Department],
      }));
      await bot.sendMessage(chatId, "send your department", {
        reply_markup: {
          keyboard: departmentOptions.map((dept) => [dept]),
          one_time_keyboard: true,
          resize_keyboard: true,
        },
      });

      bot.once("message", async (msg) => {
        const department = msg.text;
        const executor = new Executor({
          fullName: fullName,
          chatId: msg.chat.id,
          userId: userId,
          department: department,
          phoneNumber: phone_number,
          assignedReports: null,
        });
        const save = await executor.save();
        if (save) {
          bot.sendMessage(chatId, "–≤—ã –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å —É—Å–ø–µ—à–Ω–æ");
        }
      });
    });
  });
}

bot.onText(/\/admin/, async (msg) => {
  bot.sendMessage(
    msg.chat.id,
    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –≤–æ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"
  );
  bot.once("message", async (msg) => {
    if (msg.text === process.env.ADMIN_PASSWORD) {
      const admin = new Admin({
        chat_id: msg.chat.id,
        fullname: msg.chat.username,
      });
      await admin.save();
      adminPanel = true;
      const inline_keyboard: InlineKeyboardMarkup = {
        inline_keyboard: [
          [{ text: "–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—ã", callback_data: "googleSheet" }],
        ],
      };
      bot.sendMessage(msg.chat.id, "–í—ã –≤–æ—à–ª–∏ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", {
        reply_markup: inline_keyboard,
      });
    } else {
      bot.sendMessage(msg.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å");
    }
  });
});

bot.onText(/\/executor/, async (msg) => {
  bot.sendMessage(
    msg.chat.id,
    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –≤–æ–π—Ç–∏ –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ"
  );
  bot.once("message", async (msg) => {
    console.log(msg.text, typeof msg.text);
    if (msg.text === process.env.EXECUTOR_PASSWORD) {
      executorPanel = true;
      const inline_keyboard: InlineKeyboardMarkup = {
        inline_keyboard: [
          [{ text: "–ó–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data: "executorRegister" }],
        ],
      };
      bot.sendMessage(msg.chat.id, "–í—ã –≤–æ—à–ª–∏ –≤ –ø–∞–Ω–µ–ª—å –∏—Å–ø–æ–ª–Ω—è—é—â–µ–≥–æ", {
        reply_markup: inline_keyboard,
      });
    } else {
      bot.sendMessage(msg.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å");
    }
  });
});

bot.on("callback_query", async (query) => {
  const chatId = query.message?.chat.id;
  if (!chatId) return;

  switch (query.data) {
    case "register":
      await handleRegister(chatId);
      break;
    case "report":
      await handleReport(chatId);
      break;
    case "language":
      await handleLanguage(chatId);
      break;
    case "googleSheet":
      if (!adminPanel) {
        await bot.sendMessage(chatId, "–í–∞–º –Ω–µ –¥–æ–∑–≤–æ–ª–µ–Ω–Ω–æ –¥–µ–ª–∞—Ç—å —ç—Ç–æ");
      }
      await handleGoogleSheetId(chatId);
      break;
    case "executorRegister":
      if (!executorPanel) {
        bot.sendMessage(chatId, "–í–∞–º –Ω–µ –ø–æ–∑–≤–æ–ª–µ–Ω–∞ –¥–∞–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è");
      }
      await handleRegisterExecutor(chatId);
  }

  await bot.answerCallbackQuery(query.id);
});

console.log("Bot is running...");
