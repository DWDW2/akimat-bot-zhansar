import TelegramBot from "node-telegram-bot-api";
import uploadFile from "./upload";
import { db } from "./db";
import { NewUser, users } from "./db/shema";
const bot = new TelegramBot("7385522997:AAGTxQQ5wdYGF2fCVtC0cJo0PZxmkzNh_oE", {
    polling: {
        interval: 300,
        autoStart: true
    }    
});

bot.on("polling_error", (err: any) => console.log(err.data.error.message));

const register = async (userData: NewUser) => {
    try {
        await db.insert(users).values(userData);
        console.log("User registered successfully!");
    } catch (error) {
        console.error("Error registering user:", error);
        throw error;
    }
};

bot.setMyCommands([
    {command: '/start', description: '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º / Start working with the bot'},
    {command: '/help', description: 'üÜò –ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º? / How to work with the bot?'},
    {command: '/info', description: '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ / Information about the bot'},
    {command: '/feedback', description: 'üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ / Leave a feedback'}
]); 

let registrationState: { [key: number]: any } = {};

bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;

    const languageKeyboard = {
        reply_markup: {
            keyboard: [
                [{ text: '–†—É—Å—Å–∫–∏–π' }],
                [{ text: '“ö–∞–∑–∞“õ—à–∞' }], 
            ],
            one_time_keyboard: true 
        }
    };

    await bot.sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / –¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑:", languageKeyboard);
    registrationState[chatId] = { step: 'language' };
});

bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from?.id;
    const text = msg.text;

    if (!registrationState[chatId]) {
        return;
    }

    switch (registrationState[chatId].step) {
        case 'language':
            if (text === '–†—É—Å—Å–∫–∏–π' || text === '“ö–∞–∑–∞“õ—à–∞') {
                registrationState[chatId].language = text;
                registrationState[chatId].step = 'email';
                const message = text === '–†—É—Å—Å–∫–∏–π' 
                    ? "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π email:"
                    : "–≠–ª–µ–∫—Ç—Ä–æ–Ω–¥—ã“õ –ø–æ—à—Ç–∞“£—ã–∑–¥—ã –∂—ñ–±–µ—Ä—ñ“£—ñ–∑:";
                await bot.sendMessage(chatId, message);
            } else {
                await bot.sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ / “∞—Å—ã–Ω—ã–ª“ì–∞–Ω –Ω“±—Å“õ–∞–ª–∞—Ä–¥–∞–Ω —Ç—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑.");
            }
            break;
        case 'email':
            registrationState[chatId].email = text;
            registrationState[chatId].step = 'phone';
            const phoneMessage = registrationState[chatId].language === '–†—É—Å—Å–∫–∏–π'
                ? "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:"
                : "–†–∞“õ–º–µ—Ç! –ï–Ω–¥—ñ —Ç–µ–ª–µ—Ñ–æ–Ω –Ω”©–º—ñ—Ä—ñ“£—ñ–∑–¥—ñ –∂—ñ–±–µ—Ä—ñ“£—ñ–∑:";
            await bot.sendMessage(chatId, phoneMessage);
            break;
        case 'phone':
            registrationState[chatId].phone = text;
            registrationState[chatId].step = 'fullName';
            const nameMessage = registrationState[chatId].language === '–†—É—Å—Å–∫–∏–π'
                ? "–û—Ç–ª–∏—á–Ω–æ! –ù–∞–∫–æ–Ω–µ—Ü, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–µ –§–ò–û:"
                : "–ñ–∞“õ—Å—ã! –°–æ“£—ã–Ω–¥–∞, —Ç–æ–ª—ã“õ –∞—Ç—ã-–∂”©–Ω—ñ“£—ñ–∑–¥—ñ –∂—ñ–±–µ—Ä—ñ“£—ñ–∑:";
            await bot.sendMessage(chatId, nameMessage);
            break;
        case 'fullName':
            registrationState[chatId].fullName = text;
            
            const userData = {
                firstName: msg.from?.first_name,
                lastName: msg.from?.last_name,
                telegramId: msg.from.id,
                email: registrationState[chatId].email,
                phoneNumber: registrationState[chatId].phone,
                language: registrationState[chatId].language
            };

            try {
                await register(userData);
                const successMessage = registrationState[chatId].language === '–†—É—Å—Å–∫–∏–π'
                    ? "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
                    : "–¢—ñ—Ä–∫–µ—É —Å”ô—Ç—Ç—ñ –∞—è“õ—Ç–∞–ª–¥—ã!";
                await bot.sendMessage(chatId, successMessage);
            } catch (error) {
                const errorMessage = registrationState[chatId].language === '–†—É—Å—Å–∫–∏–π'
                    ? "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                    : "–¢—ñ—Ä–∫–µ—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã. “ö–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑.";
                await bot.sendMessage(chatId, errorMessage);
            }

            delete registrationState[chatId];
            break;
    }
});

console.log('Bot is running...');