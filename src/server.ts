import TelegramBot from "node-telegram-bot-api";
import uploadFile from "./upload";
import { db } from "./db";
import { NewUser, reports, users } from "./db/shema";
import { eq } from "drizzle-orm";
const bot = new TelegramBot("7385522997:AAGTxQQ5wdYGF2fCVtC0cJo0PZxmkzNh_oE", {
    polling: {
        interval: 300,
        autoStart: true
    }    
});

bot.on("polling_error", (err: any) => console.log(err.data.error.message));

const register = async (userData: NewUser) => {
    try {
        await db.insert(users).values(userData);
        console.log("User registered successfully!");
    } catch (error) {
        console.error("Error registering user:", error);
        throw error;
    }
};

bot.setMyCommands([
    {command: '/start', description: '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º / Start working with the bot'},
    {command: '/help', description: 'üÜò –ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º? / How to work with the bot?'},
    {command: '/info', description: '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ / Information about the bot'},
    {command: '/feedback', description: 'üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ / Leave a feedback'}
]); 

let registrationState: { [key: number]: any } = {};

bot.on('photo', async (msg) => {
    const chatId = msg.chat.id;
    const photo = bot.getFileStream(msg.photo[msg.photo.length - 1].file_id);
    const photoUrl = await uploadFile('reports', `${chatId}_${Date.now()}.jpg`, photo);
    db.insert(reports).values({
        photoUrls: [photoUrl]
    });
    console.log(photoUrl)
});


bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;

    const languageKeyboard = {
        reply_markup: {
            keyboard: [
                [{ text: '–†—É—Å—Å–∫–∏–π' }],
                [{ text: '“ö–∞–∑–∞“õ—à–∞' }], 
            ],
            one_time_keyboard: true 
        }
    };

    await bot.sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / –¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑:", languageKeyboard);
    registrationState[chatId] = { step: 'language' };
});

bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from?.id;
    const text = msg.text;

    if (!registrationState[chatId]) {
        return;
    }

    switch (registrationState[chatId].step) {
        case 'language':
            if (text === '–†—É—Å—Å–∫–∏–π' || text === '“ö–∞–∑–∞“õ—à–∞') {
                registrationState[chatId].language = text;
                registrationState[chatId].step = 'email';
                const message = text === '–†—É—Å—Å–∫–∏–π' 
                    ? "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π email:"
                    : "–≠–ª–µ–∫—Ç—Ä–æ–Ω–¥—ã“õ –ø–æ—à—Ç–∞“£—ã–∑–¥—ã –∂—ñ–±–µ—Ä—ñ“£—ñ–∑:";
                await bot.sendMessage(chatId, message);
            } else {
                await bot.sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ / “∞—Å—ã–Ω—ã–ª“ì–∞–Ω –Ω“±—Å“õ–∞–ª–∞—Ä–¥–∞–Ω —Ç—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑.");
            }
            break;
        case 'email':
            registrationState[chatId].email = text;
            registrationState[chatId].step = 'phone';
            const phoneMessage = registrationState[chatId].language === '–†—É—Å—Å–∫–∏–π'
                ? "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:"
                : "–†–∞“õ–º–µ—Ç! –ï–Ω–¥—ñ —Ç–µ–ª–µ—Ñ–æ–Ω –Ω”©–º—ñ—Ä—ñ“£—ñ–∑–¥—ñ –∂—ñ–±–µ—Ä—ñ“£—ñ–∑:";
            await bot.sendMessage(chatId, phoneMessage);
            break;
        case 'phone':
            registrationState[chatId].phone = text;
            registrationState[chatId].step = 'fullName';
            const nameMessage = registrationState[chatId].language === '–†—É—Å—Å–∫–∏–π'
                ? "–û—Ç–ª–∏—á–Ω–æ! –ù–∞–∫–æ–Ω–µ—Ü, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–µ –§–ò–û:"
                : "–ñ–∞“õ—Å—ã! –°–æ“£—ã–Ω–¥–∞, —Ç–æ–ª—ã“õ –∞—Ç—ã-–∂”©–Ω—ñ“£—ñ–∑–¥—ñ –∂—ñ–±–µ—Ä—ñ“£—ñ–∑:";
            await bot.sendMessage(chatId, nameMessage);
            break;
        case 'fullName':
            registrationState[chatId].fullName = text;
            
            const userData = {
                firstName: msg.from?.first_name,
                lastName: msg.from?.last_name,
                telegramId: msg.from.id,
                email: registrationState[chatId].email,
                phoneNumber: registrationState[chatId].phone,
                language: registrationState[chatId].language
            };

            try {
                await register(userData);
                const successMessage = registrationState[chatId].language === '–†—É—Å—Å–∫–∏–π'
                    ? "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
                    : "–¢—ñ—Ä–∫–µ—É —Å”ô—Ç—Ç—ñ –∞—è“õ—Ç–∞–ª–¥—ã!";
                await bot.sendMessage(chatId, successMessage);
            } catch (error) {
                const errorMessage = registrationState[chatId].language === '–†—É—Å—Å–∫–∏–π'
                    ? "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                    : "–¢—ñ—Ä–∫–µ—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã. “ö–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑.";
                await bot.sendMessage(chatId, errorMessage);
            }

            delete registrationState[chatId];
            break;
    }
});

const getUserLanguage = async (telegramId: string): Promise<string> => {
    const user = await db.select({ language: users.language })
        .from(users)
        .where(eq(users.telegramId, telegramId))
        .limit(1);
    
    return user.length > 0 ? user[0].language : '–†—É—Å—Å–∫–∏–π'; 
};

const messages = {
    '–†—É—Å—Å–∫–∏–π': {
        startReport: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:",
        askDepartment: "–í –∫–∞–∫–æ–π –æ—Ç–¥–µ–ª –Ω–∞–ø—Ä–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É?",
        askPhotos: "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Ä–æ–±–ª–µ–º—ã (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç':",
        photoReceived: "–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–≥–æ—Ç–æ–≤–æ':",
        askVideo: "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –ø—Ä–æ–±–ª–µ–º—ã (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç':",
        confirmReport: (report: any) => `–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –∂–∞–ª–æ–±—ã:\n
–¢–µ–∫—Å—Ç: ${report.reportText}\n
–û—Ç–¥–µ–ª: ${report.department}\n
–§–æ—Ç–æ: ${report.photoUrls ? report.photoUrls.length : 0}\n
–í–∏–¥–µ–æ: ${report.videoUrl ? '–î–∞' : '–ù–µ—Ç'}\n
–û—Ç–ø—Ä–∞–≤–∏—Ç—å? (–¥–∞/–Ω–µ—Ç)`,
        reportSent: "–ñ–∞–ª–æ–±–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!",
        reportError: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∂–∞–ª–æ–±—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        reportCancelled: "–û—Ç–ø—Ä–∞–≤–∫–∞ –∂–∞–ª–æ–±—ã –æ—Ç–º–µ–Ω–µ–Ω–∞."
    },
    '“ö–∞–∑–∞“õ—à–∞': {
        startReport: "–ú”ô—Å–µ–ª–µ–Ω—ñ —Å–∏–ø–∞—Ç—Ç–∞“£—ã–∑:",
        askDepartment: "–®–∞“ì—ã–º–¥—ã “õ–∞–π –±”©–ª—ñ–º–≥–µ –∂—ñ–±–µ—Ä—É –∫–µ—Ä–µ–∫?",
        askPhotos: "–ú”ô—Å–µ–ª–µ–Ω—ñ“£ —Å—É—Ä–µ—Ç—Ç–µ—Ä—ñ–Ω –∂—ñ–±–µ—Ä—ñ“£—ñ–∑ (–±–∞—Ä –±–æ–ª—Å–∞) –Ω–µ–º–µ—Å–µ '–∂–æ“õ' –¥–µ–ø –∂–∞–∑—ã“£—ã–∑:",
        photoReceived: "–§–æ—Ç–æ –∞–ª—ã–Ω–¥—ã. –¢–∞“ì—ã –∂—ñ–±–µ—Ä—ñ“£—ñ–∑ –Ω–µ–º–µ—Å–µ '–¥–∞–π—ã–Ω' –¥–µ–ø –∂–∞–∑—ã“£—ã–∑:",
        askVideo: "–ú”ô—Å–µ–ª–µ–Ω—ñ“£ –±–µ–π–Ω–µ—Å—ñ–Ω –∂—ñ–±–µ—Ä—ñ“£—ñ–∑ (–±–∞—Ä –±–æ–ª—Å–∞) –Ω–µ–º–µ—Å–µ '–∂–æ“õ' –¥–µ–ø –∂–∞–∑—ã“£—ã–∑:",
        confirmReport: (report: any) => `–®–∞“ì—ã–º–¥—ã –∂—ñ–±–µ—Ä—É–¥—ñ —Ä–∞—Å—Ç–∞“£—ã–∑:\n
–ú”ô—Ç—ñ–Ω: ${report.reportText}\n
–ë”©–ª—ñ–º: ${report.department}\n
–§–æ—Ç–æ: ${report.photoUrls ? report.photoUrls.length : 0}\n
–ë–µ–π–Ω–µ: ${report.videoUrl ? '–ò”ô' : '–ñ–æ“õ'}\n
–ñ—ñ–±–µ—Ä—É? (–∏”ô/–∂–æ“õ)`,
        reportSent: "–®–∞“ì—ã–º —Å”ô—Ç—Ç—ñ –∂—ñ–±–µ—Ä—ñ–ª–¥—ñ!",
        reportError: "–®–∞“ì—ã–º–¥—ã –∂—ñ–±–µ—Ä—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã. –ö–µ–π—ñ–Ω—ñ—Ä–µ–∫ “õ–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑.",
        reportCancelled: "–®–∞“ì—ã–º–¥—ã –∂—ñ–±–µ—Ä—É —Ç–æ“õ—Ç–∞—Ç—ã–ª–¥—ã."
    }
};

let reportState: { [key: number]: any } = {};

bot.onText(/\/report/, async (msg) => {
    const chatId = msg.chat.id;
    const language = await getUserLanguage(msg.from!.id.toString());
    reportState[chatId] = { step: 'reportText', language };
    await bot.sendMessage(chatId, messages[language].startReport);
});

bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;

    if (!reportState[chatId]) return;

    const language = reportState[chatId].language;

    switch (reportState[chatId].step) {
        case 'reportText':
            reportState[chatId].reportText = text;
            reportState[chatId].step = 'department';
            await bot.sendMessage(chatId, messages[language].askDepartment);
            break;

        case 'department':
            reportState[chatId].department = text;
            reportState[chatId].step = 'photoUrls';
            await bot.sendMessage(chatId, messages[language].askPhotos);
            break;

        case 'photoUrls':
            if (msg.photo) {
                if (!reportState[chatId].photoUrls) reportState[chatId].photoUrls = [];
                reportState[chatId].photoUrls.push(msg.photo[msg.photo.length - 1].file_id);
                await bot.sendMessage(chatId, messages[language].photoReceived);
            } else if (text?.toLowerCase() === '–Ω–µ—Ç' || text?.toLowerCase() === '–∂–æ“õ' || text?.toLowerCase() === '–≥–æ—Ç–æ–≤–æ' || text?.toLowerCase() === '–¥–∞–π—ã–Ω') {
                reportState[chatId].step = 'videoUrl';
                await bot.sendMessage(chatId, messages[language].askVideo);
            }
            break;

        case 'videoUrl':
            if (msg.video) {
                reportState[chatId].videoUrl = msg.video.file_id;
            }
            reportState[chatId].step = 'confirm';
            await bot.sendMessage(chatId, messages[language].confirmReport(reportState[chatId]));
            break;

        case 'confirm':
            if (text?.toLowerCase() === '–¥–∞' || text?.toLowerCase() === '–∏”ô') {
                try {
                    const user = await db.select().from(users).where(users.telegramId.eq(msg.from!.id.toString())).limit(1);
                    if (user.length === 0) {
                        throw new Error('User not found');
                    }

                    await db.insert(reports).values({
                        reportText: reportState[chatId].reportText,
                        department: reportState[chatId].department,
                        userId: user[0].id,
                        photoUrls: reportState[chatId].photoUrls || [],
                        videoUrl: reportState[chatId].videoUrl || '',
                        dateReport: new Date(),
                        status: 'new'
                    });

                    await bot.sendMessage(chatId, messages[language].reportSent);
                } catch (error) {
                    console.error('Error submitting report:', error);
                    await bot.sendMessage(chatId, messages[language].reportError);
                }
            } else {
                await bot.sendMessage(chatId, messages[language].reportCancelled);
            }
            delete reportState[chatId];
            break;
    }
});


bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const language = await getUserLanguage(msg.from!.id.toString());

    const commands = language === '–†—É—Å—Å–∫–∏–π' ? [
        { command: '/start', description: '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º' },
        { command: '/help', description: 'üÜò –ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º?' },
        { command: '/info', description: '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ' },
        { command: '/report', description: 'üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É' },
        { command: '/feedback', description: 'üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤' }
    ] : [
        { command: '/start', description: '–ë–æ—Ç–ø–µ–Ω –∂“±–º—ã—Å—Ç—ã –±–∞—Å—Ç–∞—É' },
        { command: '/help', description: 'üÜò –ë–æ—Ç–ø–µ–Ω “õ–∞–ª–∞–π –∂“±–º—ã—Å —ñ—Å—Ç–µ—É –∫–µ—Ä–µ–∫?' },
        { command: '/info', description: '‚ÑπÔ∏è –ë–æ—Ç —Ç—É—Ä–∞–ª—ã –∞“õ–ø–∞—Ä–∞—Ç' },
        { command: '/report', description: 'üìù –®–∞“ì—ã–º –∂—ñ–±–µ—Ä—É' },
        { command: '/feedback', description: 'üìù –ü—ñ–∫—ñ—Ä “õ–∞–ª–¥—ã—Ä—É' }
    ];

    await bot.setMyCommands(commands, { scope: { type: 'chat', chat_id: chatId } });
});

console.log('Bot is running...');